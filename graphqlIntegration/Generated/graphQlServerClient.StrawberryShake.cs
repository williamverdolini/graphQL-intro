// <auto-generated/>
#nullable enable

namespace graphqlIntegration
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OnOrderConfirmedResult : global::System.IEquatable<OnOrderConfirmedResult>, IOnOrderConfirmedResult
    {
        public OnOrderConfirmedResult(global::graphqlIntegration.IOnOrderConfirmed_OrderConfirmed orderConfirmed)
        {
            OrderConfirmed = orderConfirmed;
        }

        public global::graphqlIntegration.IOnOrderConfirmed_OrderConfirmed OrderConfirmed { get; }

        public virtual global::System.Boolean Equals(OnOrderConfirmedResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (OrderConfirmed.Equals(other.OrderConfirmed));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnOrderConfirmedResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * OrderConfirmed.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OnOrderConfirmed_OrderConfirmed_Order : global::System.IEquatable<OnOrderConfirmed_OrderConfirmed_Order>, IOnOrderConfirmed_OrderConfirmed_Order
    {
        public OnOrderConfirmed_OrderConfirmed_Order(global::System.String? userName, global::graphqlIntegration.IOnOrderConfirmed_OrderConfirmed_Book? book, global::System.DateTimeOffset boughtOn)
        {
            UserName = userName;
            Book = book;
            BoughtOn = boughtOn;
        }

        public global::System.String? UserName { get; }

        public global::graphqlIntegration.IOnOrderConfirmed_OrderConfirmed_Book? Book { get; }

        public global::System.DateTimeOffset BoughtOn { get; }

        public virtual global::System.Boolean Equals(OnOrderConfirmed_OrderConfirmed_Order? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UserName is null && other.UserName is null) || UserName != null && UserName.Equals(other.UserName))) && ((Book is null && other.Book is null) || Book != null && Book.Equals(other.Book)) && BoughtOn.Equals(other.BoughtOn);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnOrderConfirmed_OrderConfirmed_Order)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UserName != null)
                {
                    hash ^= 397 * UserName.GetHashCode();
                }

                if (Book != null)
                {
                    hash ^= 397 * Book.GetHashCode();
                }

                hash ^= 397 * BoughtOn.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OnOrderConfirmed_OrderConfirmed_Book_Book : global::System.IEquatable<OnOrderConfirmed_OrderConfirmed_Book_Book>, IOnOrderConfirmed_OrderConfirmed_Book_Book
    {
        public OnOrderConfirmed_OrderConfirmed_Book_Book(global::System.String? title)
        {
            Title = title;
        }

        public global::System.String? Title { get; }

        public virtual global::System.Boolean Equals(OnOrderConfirmed_OrderConfirmed_Book_Book? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnOrderConfirmed_OrderConfirmed_Book_Book)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOnOrderConfirmedResult
    {
        public global::graphqlIntegration.IOnOrderConfirmed_OrderConfirmed OrderConfirmed { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOnOrderConfirmed_OrderConfirmed
    {
        public global::System.String? UserName { get; }

        public global::graphqlIntegration.IOnOrderConfirmed_OrderConfirmed_Book? Book { get; }

        public global::System.DateTimeOffset BoughtOn { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOnOrderConfirmed_OrderConfirmed_Order : IOnOrderConfirmed_OrderConfirmed
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOnOrderConfirmed_OrderConfirmed_Book
    {
        public global::System.String? Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOnOrderConfirmed_OrderConfirmed_Book_Book : IOnOrderConfirmed_OrderConfirmed_Book
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OrderByIdResult : global::System.IEquatable<OrderByIdResult>, IOrderByIdResult
    {
        public OrderByIdResult(global::graphqlIntegration.IOrderById_Orders? orders)
        {
            Orders = orders;
        }

        public global::graphqlIntegration.IOrderById_Orders? Orders { get; }

        public virtual global::System.Boolean Equals(OrderByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Orders is null && other.Orders is null) || Orders != null && Orders.Equals(other.Orders)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OrderByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Orders != null)
                {
                    hash ^= 397 * Orders.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OrderById_Orders_OrdersConnection : global::System.IEquatable<OrderById_Orders_OrdersConnection>, IOrderById_Orders_OrdersConnection
    {
        public OrderById_Orders_OrdersConnection(global::System.Collections.Generic.IReadOnlyList<global::graphqlIntegration.IOrderById_Orders_Nodes>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::graphqlIntegration.IOrderById_Orders_Nodes>? Nodes { get; }

        public virtual global::System.Boolean Equals(OrderById_Orders_OrdersConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OrderById_Orders_OrdersConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OrderById_Orders_Nodes_Order : global::System.IEquatable<OrderById_Orders_Nodes_Order>, IOrderById_Orders_Nodes_Order
    {
        public OrderById_Orders_Nodes_Order(global::graphqlIntegration.IOrderById_Orders_Nodes_Book? book, global::System.DateTimeOffset boughtOn, global::System.Int32 quantity, global::System.Int64 amount)
        {
            Book = book;
            BoughtOn = boughtOn;
            Quantity = quantity;
            Amount = amount;
        }

        public global::graphqlIntegration.IOrderById_Orders_Nodes_Book? Book { get; }

        public global::System.DateTimeOffset BoughtOn { get; }

        public global::System.Int32 Quantity { get; }

        public global::System.Int64 Amount { get; }

        public virtual global::System.Boolean Equals(OrderById_Orders_Nodes_Order? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Book is null && other.Book is null) || Book != null && Book.Equals(other.Book))) && BoughtOn.Equals(other.BoughtOn) && Quantity == other.Quantity && Amount == other.Amount;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OrderById_Orders_Nodes_Order)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Book != null)
                {
                    hash ^= 397 * Book.GetHashCode();
                }

                hash ^= 397 * BoughtOn.GetHashCode();
                hash ^= 397 * Quantity.GetHashCode();
                hash ^= 397 * Amount.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OrderById_Orders_Nodes_Book_Book : global::System.IEquatable<OrderById_Orders_Nodes_Book_Book>, IOrderById_Orders_Nodes_Book_Book
    {
        public OrderById_Orders_Nodes_Book_Book(global::System.String? title, global::System.String? @abstract, global::System.Collections.Generic.IReadOnlyList<global::System.String>? categories)
        {
            Title = title;
            Abstract = @abstract;
            Categories = categories;
        }

        public global::System.String? Title { get; }

        public global::System.String? Abstract { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Categories { get; }

        public virtual global::System.Boolean Equals(OrderById_Orders_Nodes_Book_Book? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title))) && ((Abstract is null && other.Abstract is null) || Abstract != null && Abstract.Equals(other.Abstract)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Categories, other.Categories);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OrderById_Orders_Nodes_Book_Book)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                if (Abstract != null)
                {
                    hash ^= 397 * Abstract.GetHashCode();
                }

                if (Categories != null)
                {
                    foreach (var Categories_elm in Categories)
                    {
                        hash ^= 397 * Categories_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOrderByIdResult
    {
        public global::graphqlIntegration.IOrderById_Orders? Orders { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOrderById_Orders
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::graphqlIntegration.IOrderById_Orders_Nodes>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOrderById_Orders_OrdersConnection : IOrderById_Orders
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOrderById_Orders_Nodes
    {
        public global::graphqlIntegration.IOrderById_Orders_Nodes_Book? Book { get; }

        public global::System.DateTimeOffset BoughtOn { get; }

        public global::System.Int32 Quantity { get; }

        public global::System.Int64 Amount { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOrderById_Orders_Nodes_Order : IOrderById_Orders_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOrderById_Orders_Nodes_Book
    {
        public global::System.String? Title { get; }

        public global::System.String? Abstract { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Categories { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOrderById_Orders_Nodes_Book_Book : IOrderById_Orders_Nodes_Book
    {
    }

    /// <summary>
    /// Represents the operation service of the OnOrderConfirmed GraphQL operation
    /// <code>
    /// subscription OnOrderConfirmed {
    ///   orderConfirmed {
    ///     __typename
    ///     userName
    ///     book {
    ///       __typename
    ///       title
    ///       ... on Book {
    ///         id
    ///       }
    ///     }
    ///     boughtOn
    ///     ... on Order {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OnOrderConfirmedSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private OnOrderConfirmedSubscriptionDocument()
        {
        }

        public static OnOrderConfirmedSubscriptionDocument Instance { get; } = new OnOrderConfirmedSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x6f, 0x6f, 0x6b, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "fed2348036e815a740a8d595e417b6d3");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the OnOrderConfirmed GraphQL operation
    /// <code>
    /// subscription OnOrderConfirmed {
    ///   orderConfirmed {
    ///     __typename
    ///     userName
    ///     book {
    ///       __typename
    ///       title
    ///       ... on Book {
    ///         id
    ///       }
    ///     }
    ///     boughtOn
    ///     ... on Order {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OnOrderConfirmedSubscription : global::graphqlIntegration.IOnOrderConfirmedSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOnOrderConfirmedResult> _operationExecutor;
        public OnOrderConfirmedSubscription(global::StrawberryShake.IOperationExecutor<IOnOrderConfirmedResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOnOrderConfirmedResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOnOrderConfirmedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OnOrderConfirmedSubscriptionDocument.Instance.Hash.Value, name: "OnOrderConfirmed", document: OnOrderConfirmedSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the OnOrderConfirmed GraphQL operation
    /// <code>
    /// subscription OnOrderConfirmed {
    ///   orderConfirmed {
    ///     __typename
    ///     userName
    ///     book {
    ///       __typename
    ///       title
    ///       ... on Book {
    ///         id
    ///       }
    ///     }
    ///     boughtOn
    ///     ... on Order {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOnOrderConfirmedSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOnOrderConfirmedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the OrderById GraphQL operation
    /// <code>
    /// query OrderById($orderId: String) {
    ///   orders(where: { id: { eq: $orderId } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       book {
    ///         __typename
    ///         title
    ///         abstract
    ///         categories
    ///         ... on Book {
    ///           id
    ///         }
    ///       }
    ///       boughtOn
    ///       quantity
    ///       amount
    ///       ... on Order {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OrderByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private OrderByIdQueryDocument()
        {
        }

        public static OrderByIdQueryDocument Instance { get; } = new OrderByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x6f, 0x6f, 0x6b, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x20, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a90a413155cb51a0f6415ce8c9edba6d");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the OrderById GraphQL operation
    /// <code>
    /// query OrderById($orderId: String) {
    ///   orders(where: { id: { eq: $orderId } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       book {
    ///         __typename
    ///         title
    ///         abstract
    ///         categories
    ///         ... on Book {
    ///           id
    ///         }
    ///       }
    ///       boughtOn
    ///       quantity
    ///       amount
    ///       ... on Order {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OrderByIdQuery : global::graphqlIntegration.IOrderByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOrderByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public OrderByIdQuery(global::StrawberryShake.IOperationExecutor<IOrderByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOrderByIdResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IOrderByIdResult>> ExecuteAsync(global::System.String? orderId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(orderId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOrderByIdResult>> Watch(global::System.String? orderId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(orderId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? orderId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("orderId", FormatOrderId(orderId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OrderByIdQueryDocument.Instance.Hash.Value, name: "OrderById", document: OrderByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatOrderId(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the OrderById GraphQL operation
    /// <code>
    /// query OrderById($orderId: String) {
    ///   orders(where: { id: { eq: $orderId } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       book {
    ///         __typename
    ///         title
    ///         abstract
    ///         categories
    ///         ... on Book {
    ///           id
    ///         }
    ///       }
    ///       boughtOn
    ///       quantity
    ///       amount
    ///       ... on Order {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IOrderByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IOrderByIdResult>> ExecuteAsync(global::System.String? orderId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOrderByIdResult>> Watch(global::System.String? orderId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the graphQlServerClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class graphQlServerClient : global::graphqlIntegration.IgraphQlServerClient
    {
        private readonly global::graphqlIntegration.IOnOrderConfirmedSubscription _onOrderConfirmed;
        private readonly global::graphqlIntegration.IOrderByIdQuery _orderById;
        public graphQlServerClient(global::graphqlIntegration.IOnOrderConfirmedSubscription onOrderConfirmed, global::graphqlIntegration.IOrderByIdQuery orderById)
        {
            _onOrderConfirmed = onOrderConfirmed ?? throw new global::System.ArgumentNullException(nameof(onOrderConfirmed));
            _orderById = orderById ?? throw new global::System.ArgumentNullException(nameof(orderById));
        }

        public static global::System.String ClientName => "graphQlServerClient";
        public global::graphqlIntegration.IOnOrderConfirmedSubscription OnOrderConfirmed => _onOrderConfirmed;
        public global::graphqlIntegration.IOrderByIdQuery OrderById => _orderById;
    }

    /// <summary>
    /// Represents the graphQlServerClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public interface IgraphQlServerClient
    {
        global::graphqlIntegration.IOnOrderConfirmedSubscription OnOrderConfirmed { get; }

        global::graphqlIntegration.IOrderByIdQuery OrderById { get; }
    }
}

namespace graphqlIntegration.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OrderEntity
    {
        public OrderEntity(global::System.String? userName = default !, global::StrawberryShake.EntityId? book = default !, global::System.DateTimeOffset boughtOn = default !, global::System.Int32 quantity = default !, global::System.Int64 amount = default !)
        {
            UserName = userName;
            Book = book;
            BoughtOn = boughtOn;
            Quantity = quantity;
            Amount = amount;
        }

        public global::System.String? UserName { get; }

        public global::StrawberryShake.EntityId? Book { get; }

        public global::System.DateTimeOffset BoughtOn { get; }

        public global::System.Int32 Quantity { get; }

        public global::System.Int64 Amount { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class BookEntity
    {
        public BookEntity(global::System.String? title = default !, global::System.String? @abstract = default !, global::System.Collections.Generic.IReadOnlyList<global::System.String>? categories = default !)
        {
            Title = title;
            Abstract = @abstract;
            Categories = categories;
        }

        public global::System.String? Title { get; }

        public global::System.String? Abstract { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Categories { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OnOrderConfirmedResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::graphqlIntegration.OnOrderConfirmedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.OrderEntity, OnOrderConfirmed_OrderConfirmed_Order> _onOrderConfirmed_OrderConfirmed_OrderFromOrderEntityMapper;
        public OnOrderConfirmedResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.OrderEntity, OnOrderConfirmed_OrderConfirmed_Order> onOrderConfirmed_OrderConfirmed_OrderFromOrderEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _onOrderConfirmed_OrderConfirmed_OrderFromOrderEntityMapper = onOrderConfirmed_OrderConfirmed_OrderFromOrderEntityMapper ?? throw new global::System.ArgumentNullException(nameof(onOrderConfirmed_OrderConfirmed_OrderFromOrderEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::graphqlIntegration.IOnOrderConfirmedResult);
        public OnOrderConfirmedResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OnOrderConfirmedResultInfo info)
            {
                return new OnOrderConfirmedResult(MapNonNullableIOnOrderConfirmed_OrderConfirmed(info.OrderConfirmed, snapshot));
            }

            throw new global::System.ArgumentException("OnOrderConfirmedResultInfo expected.");
        }

        private global::graphqlIntegration.IOnOrderConfirmed_OrderConfirmed MapNonNullableIOnOrderConfirmed_OrderConfirmed(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Order", global::System.StringComparison.Ordinal))
            {
                return _onOrderConfirmed_OrderConfirmed_OrderFromOrderEntityMapper.Map(snapshot.GetEntity<global::graphqlIntegration.State.OrderEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OnOrderConfirmedResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OnOrderConfirmedResultInfo(global::StrawberryShake.EntityId orderConfirmed, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            OrderConfirmed = orderConfirmed;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId OrderConfirmed { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OnOrderConfirmedResultInfo(OrderConfirmed, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OnOrderConfirmed_OrderConfirmed_OrderFromOrderEntityMapper : global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.OrderEntity, OnOrderConfirmed_OrderConfirmed_Order>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.BookEntity, OnOrderConfirmed_OrderConfirmed_Book_Book> _onOrderConfirmed_OrderConfirmed_Book_BookFromBookEntityMapper;
        public OnOrderConfirmed_OrderConfirmed_OrderFromOrderEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.BookEntity, OnOrderConfirmed_OrderConfirmed_Book_Book> onOrderConfirmed_OrderConfirmed_Book_BookFromBookEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _onOrderConfirmed_OrderConfirmed_Book_BookFromBookEntityMapper = onOrderConfirmed_OrderConfirmed_Book_BookFromBookEntityMapper ?? throw new global::System.ArgumentNullException(nameof(onOrderConfirmed_OrderConfirmed_Book_BookFromBookEntityMapper));
        }

        public OnOrderConfirmed_OrderConfirmed_Order Map(global::graphqlIntegration.State.OrderEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new OnOrderConfirmed_OrderConfirmed_Order(entity.UserName, MapIOnOrderConfirmed_OrderConfirmed_Book(entity.Book, snapshot), entity.BoughtOn);
        }

        private global::graphqlIntegration.IOnOrderConfirmed_OrderConfirmed_Book? MapIOnOrderConfirmed_OrderConfirmed_Book(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Book", global::System.StringComparison.Ordinal))
            {
                return _onOrderConfirmed_OrderConfirmed_Book_BookFromBookEntityMapper.Map(snapshot.GetEntity<global::graphqlIntegration.State.BookEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OnOrderConfirmed_OrderConfirmed_Book_BookFromBookEntityMapper : global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.BookEntity, OnOrderConfirmed_OrderConfirmed_Book_Book>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public OnOrderConfirmed_OrderConfirmed_Book_BookFromBookEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public OnOrderConfirmed_OrderConfirmed_Book_Book Map(global::graphqlIntegration.State.BookEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new OnOrderConfirmed_OrderConfirmed_Book_Book(entity.Title);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OrderByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::graphqlIntegration.OrderByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.OrderEntity, OrderById_Orders_Nodes_Order> _orderById_Orders_Nodes_OrderFromOrderEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.BookEntity, OrderById_Orders_Nodes_Book_Book> _orderById_Orders_Nodes_Book_BookFromBookEntityMapper;
        public OrderByIdResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.OrderEntity, OrderById_Orders_Nodes_Order> orderById_Orders_Nodes_OrderFromOrderEntityMapper, global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.BookEntity, OrderById_Orders_Nodes_Book_Book> orderById_Orders_Nodes_Book_BookFromBookEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _orderById_Orders_Nodes_OrderFromOrderEntityMapper = orderById_Orders_Nodes_OrderFromOrderEntityMapper ?? throw new global::System.ArgumentNullException(nameof(orderById_Orders_Nodes_OrderFromOrderEntityMapper));
            _orderById_Orders_Nodes_Book_BookFromBookEntityMapper = orderById_Orders_Nodes_Book_BookFromBookEntityMapper ?? throw new global::System.ArgumentNullException(nameof(orderById_Orders_Nodes_Book_BookFromBookEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::graphqlIntegration.IOrderByIdResult);
        public OrderByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OrderByIdResultInfo info)
            {
                return new OrderByIdResult(MapIOrderById_Orders(info.Orders, snapshot));
            }

            throw new global::System.ArgumentException("OrderByIdResultInfo expected.");
        }

        private global::graphqlIntegration.IOrderById_Orders? MapIOrderById_Orders(global::graphqlIntegration.State.OrdersConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IOrderById_Orders returnValue = default !;
            if (data?.__typename.Equals("OrdersConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new OrderById_Orders_OrdersConnection(MapIOrderById_Orders_NodesNonNullableArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::graphqlIntegration.IOrderById_Orders_Nodes>? MapIOrderById_Orders_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var orders = new global::System.Collections.Generic.List<global::graphqlIntegration.IOrderById_Orders_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                orders.Add(MapNonNullableIOrderById_Orders_Nodes(child, snapshot));
            }

            return orders;
        }

        private global::graphqlIntegration.IOrderById_Orders_Nodes MapNonNullableIOrderById_Orders_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Order", global::System.StringComparison.Ordinal))
            {
                return _orderById_Orders_Nodes_OrderFromOrderEntityMapper.Map(snapshot.GetEntity<global::graphqlIntegration.State.OrderEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::graphqlIntegration.IOrderById_Orders_Nodes_Book? MapIOrderById_Orders_Nodes_Book(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Book", global::System.StringComparison.Ordinal))
            {
                return _orderById_Orders_Nodes_Book_BookFromBookEntityMapper.Map(snapshot.GetEntity<global::graphqlIntegration.State.BookEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OrderByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OrderByIdResultInfo(global::graphqlIntegration.State.OrdersConnectionData? orders, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Orders = orders;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::graphqlIntegration.State.OrdersConnectionData? Orders { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OrderByIdResultInfo(Orders, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OrderById_Orders_Nodes_OrderFromOrderEntityMapper : global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.OrderEntity, OrderById_Orders_Nodes_Order>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.BookEntity, OrderById_Orders_Nodes_Book_Book> _orderById_Orders_Nodes_Book_BookFromBookEntityMapper;
        public OrderById_Orders_Nodes_OrderFromOrderEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.BookEntity, OrderById_Orders_Nodes_Book_Book> orderById_Orders_Nodes_Book_BookFromBookEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _orderById_Orders_Nodes_Book_BookFromBookEntityMapper = orderById_Orders_Nodes_Book_BookFromBookEntityMapper ?? throw new global::System.ArgumentNullException(nameof(orderById_Orders_Nodes_Book_BookFromBookEntityMapper));
        }

        public OrderById_Orders_Nodes_Order Map(global::graphqlIntegration.State.OrderEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new OrderById_Orders_Nodes_Order(MapIOrderById_Orders_Nodes_Book(entity.Book, snapshot), entity.BoughtOn, entity.Quantity, entity.Amount);
        }

        private global::graphqlIntegration.IOrderById_Orders_Nodes_Book? MapIOrderById_Orders_Nodes_Book(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Book", global::System.StringComparison.Ordinal))
            {
                return _orderById_Orders_Nodes_Book_BookFromBookEntityMapper.Map(snapshot.GetEntity<global::graphqlIntegration.State.BookEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OrderById_Orders_Nodes_Book_BookFromBookEntityMapper : global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.BookEntity, OrderById_Orders_Nodes_Book_Book>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public OrderById_Orders_Nodes_Book_BookFromBookEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public OrderById_Orders_Nodes_Book_Book Map(global::graphqlIntegration.State.BookEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new OrderById_Orders_Nodes_Book_Book(entity.Title, entity.Abstract, entity.Categories);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OnOrderConfirmedBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::graphqlIntegration.IOnOrderConfirmedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::graphqlIntegration.IOnOrderConfirmedResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public OnOrderConfirmedBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::graphqlIntegration.IOnOrderConfirmedResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IOnOrderConfirmedResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IOnOrderConfirmedResult Result, OnOrderConfirmedResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IOnOrderConfirmedResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IOnOrderConfirmedResult, OnOrderConfirmedResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId orderConfirmedId = default !;
            _entityStore.Update(session =>
            {
                orderConfirmedId = UpdateNonNullableIOnOrderConfirmed_OrderConfirmedEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "orderConfirmed"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new OnOrderConfirmedResultInfo(orderConfirmedId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIOnOrderConfirmed_OrderConfirmedEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Order", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::graphqlIntegration.State.OrderEntity? entity))
                {
                    session.SetEntity(entityId, new global::graphqlIntegration.State.OrderEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userName")), UpdateIOnOrderConfirmed_OrderConfirmed_BookEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "book"), entityIds), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "boughtOn")), entity.Quantity, entity.Amount));
                }
                else
                {
                    session.SetEntity(entityId, new global::graphqlIntegration.State.OrderEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userName")), UpdateIOnOrderConfirmed_OrderConfirmed_BookEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "book"), entityIds), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "boughtOn")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateIOnOrderConfirmed_OrderConfirmed_BookEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Book", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::graphqlIntegration.State.BookEntity? entity))
                {
                    session.SetEntity(entityId, new global::graphqlIntegration.State.BookEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), entity.Abstract, entity.Categories));
                }
                else
                {
                    session.SetEntity(entityId, new global::graphqlIntegration.State.BookEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OrderByIdBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::graphqlIntegration.IOrderByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::graphqlIntegration.IOrderByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        public OrderByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::graphqlIntegration.IOrderByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
        }

        public global::StrawberryShake.IOperationResult<IOrderByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IOrderByIdResult Result, OrderByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IOrderByIdResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IOrderByIdResult, OrderByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::graphqlIntegration.State.OrdersConnectionData? ordersId = default !;
            _entityStore.Update(session =>
            {
                ordersId = DeserializeIOrderById_Orders(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "orders"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new OrderByIdResultInfo(ordersId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::graphqlIntegration.State.OrdersConnectionData? DeserializeIOrderById_Orders(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("OrdersConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::graphqlIntegration.State.OrdersConnectionData(typename, nodes: UpdateIOrderById_Orders_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIOrderById_Orders_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var orders = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                orders.Add(UpdateNonNullableIOrderById_Orders_NodesEntity(session, child, entityIds));
            }

            return orders;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIOrderById_Orders_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Order", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::graphqlIntegration.State.OrderEntity? entity))
                {
                    session.SetEntity(entityId, new global::graphqlIntegration.State.OrderEntity(entity.UserName, UpdateIOrderById_Orders_Nodes_BookEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "book"), entityIds), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "boughtOn")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "quantity")), DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::graphqlIntegration.State.OrderEntity(default !, UpdateIOrderById_Orders_Nodes_BookEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "book"), entityIds), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "boughtOn")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "quantity")), DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIOrderById_Orders_Nodes_BookEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Book", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::graphqlIntegration.State.BookEntity? entity))
                {
                    session.SetEntity(entityId, new global::graphqlIntegration.State.BookEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "abstract")), DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "categories"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::graphqlIntegration.State.BookEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "abstract")), DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "categories"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class OrdersConnectionData
    {
        public OrdersConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class graphQlServerClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Order" => ParseOrderEntityId(obj, __typename),
                "Book" => ParseBookEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Order" => FormatOrderEntityId(entityId),
                "Book" => FormatBookEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseOrderEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrderEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseBookEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatBookEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public partial class graphQlServerClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public graphQlServerClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.1.0.0")]
    public static partial class graphQlServerClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::graphqlIntegration.State.graphQlServerClientStoreAccessor> AddgraphQlServerClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::graphqlIntegration.State.graphQlServerClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::graphqlIntegration.OnOrderConfirmedSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::graphqlIntegration.OrderByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::graphqlIntegration.graphQlServerClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::graphqlIntegration.IgraphQlServerClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::graphqlIntegration.State.graphQlServerClientStoreAccessor>("graphQlServerClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(services, sp =>
            {
                var sessionPool = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.ISessionPool>(parentServices);
                return new global::StrawberryShake.Transport.WebSockets.WebSocketConnection(async ct => await sessionPool.CreateAsync("graphQlServerClient", ct));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("graphQlServerClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.OrderEntity, global::graphqlIntegration.OnOrderConfirmed_OrderConfirmed_Order>, global::graphqlIntegration.State.OnOrderConfirmed_OrderConfirmed_OrderFromOrderEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.BookEntity, global::graphqlIntegration.OnOrderConfirmed_OrderConfirmed_Book_Book>, global::graphqlIntegration.State.OnOrderConfirmed_OrderConfirmed_Book_BookFromBookEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.OrderEntity, global::graphqlIntegration.OrderById_Orders_Nodes_Order>, global::graphqlIntegration.State.OrderById_Orders_Nodes_OrderFromOrderEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::graphqlIntegration.State.BookEntity, global::graphqlIntegration.OrderById_Orders_Nodes_Book_Book>, global::graphqlIntegration.State.OrderById_Orders_Nodes_Book_BookFromBookEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::graphqlIntegration.IOnOrderConfirmedResult>, global::graphqlIntegration.State.OnOrderConfirmedResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::graphqlIntegration.IOnOrderConfirmedResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::graphqlIntegration.IOnOrderConfirmedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::graphqlIntegration.IOnOrderConfirmedResult>, global::graphqlIntegration.State.OnOrderConfirmedBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::graphqlIntegration.IOnOrderConfirmedResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::graphqlIntegration.IOnOrderConfirmedResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::graphqlIntegration.IOnOrderConfirmedResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::graphqlIntegration.OnOrderConfirmedSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::graphqlIntegration.IOnOrderConfirmedSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::graphqlIntegration.OnOrderConfirmedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::graphqlIntegration.IOrderByIdResult>, global::graphqlIntegration.State.OrderByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::graphqlIntegration.IOrderByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::graphqlIntegration.IOrderByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::graphqlIntegration.IOrderByIdResult>, global::graphqlIntegration.State.OrderByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::graphqlIntegration.IOrderByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::graphqlIntegration.IOrderByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::graphqlIntegration.IOrderByIdResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::graphqlIntegration.OrderByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::graphqlIntegration.IOrderByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::graphqlIntegration.OrderByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::graphqlIntegration.State.graphQlServerClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::graphqlIntegration.graphQlServerClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::graphqlIntegration.IgraphQlServerClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::graphqlIntegration.graphQlServerClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
